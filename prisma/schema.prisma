// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  user_name        String  @db.VarChar(50)
  first_name       String? @db.VarChar(50)
  last_name        String? @db.VarChar(50)
  gender           Int?
  city             String? @db.VarChar(100)
  district         String? @db.VarChar(150)
  ward             String? @db.VarChar(100)
  street_address   String? @db.VarChar(200)
  email            String  @unique @db.VarChar(100)
  password         String
  birth_year       Int?
  avatar           String?
  phone            String? @db.VarChar(15)
  operating_status Boolean
  hashed_rt        String?

  // Foreign key
  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  clinic_id Int?    @unique
  clinic    Clinic? @relation(fields: [clinic_id], references: [id])

  Pet Pet[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  feedback     Feedback[]
  Appointment  Appointment[]
  PetCondition PetCondition[]

  @@map("users")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(20)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User[]

  @@map("roles")
}

model Pet {
  id      Int    @id @default(autoincrement())
  name    String
  species String
  breed   String
  gender  Int
  age     Int
  weight  Int

  // Foreign key
  owner_id Int
  owner    User @relation(fields: [owner_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  pet_condition PetCondition?
  Appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  appointmentId Int?

  @@map("pets")
}

model Appointment {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(100)
  email            String   @db.VarChar(100)
  phone            String   @db.VarChar(15)
  appointment_date DateTime
  appointment_time String
  service_package  String
  status           String

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Pet        Pet[]

  @@map("appointments")
}

model PetCondition {
  id                      Int    @id @default(autoincrement())
  meal                    String @db.Text
  manifestation           String @db.Text
  condition_of_defecation String @db.Text
  vet_advice              String @db.Text

  // Foreign key
  pet_id Int @unique
  pet    Pet @relation(fields: [pet_id], references: [id])

  vet_id Int
  vet    User @relation(fields: [vet_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("pet_condition")
}

model Clinic {
  id             Int    @id @default(autoincrement())
  name           String @db.VarChar(100)
  city           String @db.VarChar(50)
  district       String @db.VarChar(100)
  ward           String @db.VarChar(100)
  street_address String @db.VarChar(100)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User?

  @@map("clinics")
}

model Feedback {
  id      Int     @id @default(autoincrement())
  email   String  @db.VarChar(100)
  phone   String? @db.VarChar(15)
  subject String  @db.VarChar(150)
  content String

  // Foreign key
  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("feedbacks")
}
